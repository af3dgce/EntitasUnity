//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ChunkContext {

    public ChunkEntity activeChunkEntity { get { return GetGroup(ChunkMatcher.ActiveChunk).GetSingleEntity(); } }

    public bool isActiveChunk {
        get { return activeChunkEntity != null; }
        set {
            var entity = activeChunkEntity;
            if (value != (entity != null)) {
                if (value) {
                    CreateEntity().isActiveChunk = true;
                } else {
                    entity.Destroy();
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ChunkEntity {

    public Entitas.Data.ChunkComponent chunk { get { return (Entitas.Data.ChunkComponent)GetComponent(ChunkComponentsLookup.Chunk); } }
    public bool hasChunk { get { return HasComponent(ChunkComponentsLookup.Chunk); } }

    public void AddChunk(Entitas.Data.IChunk newValue) {
        var index = ChunkComponentsLookup.Chunk;
        var component = CreateComponent<Entitas.Data.ChunkComponent>(index);
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceChunk(Entitas.Data.IChunk newValue) {
        var index = ChunkComponentsLookup.Chunk;
        var component = CreateComponent<Entitas.Data.ChunkComponent>(index);
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveChunk() {
        RemoveComponent(ChunkComponentsLookup.Chunk);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ChunkEntity {

    static readonly Entitas.Data.ActiveChunkComponent activeChunkComponent = new Entitas.Data.ActiveChunkComponent();

    public bool isActiveChunk {
        get { return HasComponent(ChunkComponentsLookup.ActiveChunk); }
        set {
            if (value != isActiveChunk) {
                var index = ChunkComponentsLookup.ActiveChunk;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : activeChunkComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ChunkMatcher {

    static Entitas.IMatcher<ChunkEntity> _matcherChunk;

    public static Entitas.IMatcher<ChunkEntity> Chunk {
        get {
            if (_matcherChunk == null) {
                var matcher = (Entitas.Matcher<ChunkEntity>)Entitas.Matcher<ChunkEntity>.AllOf(ChunkComponentsLookup.Chunk);
                matcher.componentNames = ChunkComponentsLookup.componentNames;
                _matcherChunk = matcher;
            }

            return _matcherChunk;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ChunkMatcher {

    static Entitas.IMatcher<ChunkEntity> _matcherActiveChunk;

    public static Entitas.IMatcher<ChunkEntity> ActiveChunk {
        get {
            if (_matcherActiveChunk == null) {
                var matcher = (Entitas.Matcher<ChunkEntity>)Entitas.Matcher<ChunkEntity>.AllOf(ChunkComponentsLookup.ActiveChunk);
                matcher.componentNames = ChunkComponentsLookup.componentNames;
                _matcherActiveChunk = matcher;
            }

            return _matcherActiveChunk;
        }
    }
}
